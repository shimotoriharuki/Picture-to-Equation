clear
clf
% 時刻tで変化する任意のデータ
data = load('cat_data.mat');
data.size = length(data.position);

picture.position.x = data.position(1, :); 
picture.position.y = data.position(2, :); 

% フーリエ変換
equation.F.x = fft(picture.position.x) / length(picture.position.x);
equation.F.y = fft(picture.position.y) / length(picture.position.y);

% パラメータ
N = length(equation.F.x);
frequencies = [0:N/2-1, -N/2:-1];
time = linspace(0, 2*pi, N+1);

% 直径，周波数，初期位相を計算
animation.amp.x = abs(equation.F.x);
animation.amp.y = abs(equation.F.y);

animation.freq = 1:N;

animation.phase.x = atan2(imag(equation.F.x), real(equation.F.x));
animation.phase.y = atan2(imag(equation.F.y), real(equation.F.y));

[animation.amp.x, idx] = sort(animation.amp.x, "descend");
animation.phase.x = animation.phase.x(idx);

[animation.amp.y, idx] = sort(animation.amp.y, "descend");
animation.phase.y = animation.phase.y(idx);

% アニメーション
figure(1)

circle_num = length(equation.F.x);
frames = length(equation.F.x);
frame_interval = 10;
xs
for f = 0 :frame_interval : frames
    %x
    animation.center.x = [0, 0];
    animation.centers.x = zeros(circle_num, 2);
    animation.next_centers.x = zeros(circle_num, 2);
    animation.radiuses.x = zeros(1, circle_num);

    animation.theta.x = 0;
    %y
    animation.center.y = [0, 0];
    animation.centers.y = zeros(circle_num, 2);
    animation.next_centers.y = zeros(circle_num, 2);
    animation.radiuses.y = zeros(1, circle_num);

    animation.theta.y = 0;
    clf
    for n = 1:circle_num
        %x
        animation.centers.x(n, :) = animation.center.x;
        animation.radiuses.x(n) = animation.amp.x(n);
        animation.theta.x = 2*pi*animation.freq(n)*f/frames + animation.phase.x(n);
        %y
        animation.centers.y(n, :) = animation.center.y;
        animation.radiuses.y(n) = animation.amp.y(n);
        animation.theta.y = 2*pi*animation.freq(n)*f/frames + animation.phase.y(n);
        
        %x
        animation.next_center.x = [animation.center.x(1) + animation.amp.x(n) * cos(animation.theta.x), 
            animation.center.x(2) + animation.amp.x(n) * sin(animation.theta.x)];
        %y
        animation.next_center.y = [animation.center.y(1) + animation.amp.y(n) * cos(animation.theta.y), 
            animation.center.y(2) + animation.amp.y(n) * sin(animation.theta.y)];

        %x
        animation.center.x = animation.next_center.x;
        animation.next_centers.x(n, :) = animation.next_center.x;
        %y
        animation.center.y = animation.next_center.y;
        animation.next_centers.y(n, :) = animation.next_center.y;
        
    end

    hold on
    subplot(2, 1, 1)
    plotCircle(animation.centers.x, animation.radiuses.x);
    axis equal

    subplot(2, 1, 2)
    plotCircle(animation.centers.y, animation.radiuses.y);
    % plotLine(centers', next_centers');
    axis equal

    drawnow
    hold off

end



function plotCircle(centers, radiuses)
    viscircles(centers, radiuses);
    % rectangle('Position',[center - radius, radius * 2, radius * 2], 'Curvature', [1, 1]);
end

function plotLine(start, stop)
    line([start(1, :); stop(1, :)], [start(2, :); stop(2, :)]);

    % plot([start(1), stop(1)], [start(2), stop(2)]);
end